mqtt:
  sensor:
    - name: "AlthermaSensors"
      unique_id: althermasensors_raw
      state_topic: "espaltherma/AlthermaSensors"
      # State egal – wir wollen die ATTRIBUTES:
      value_template: "{{ now().isoformat() }}"
      json_attributes_topic: "espaltherma/AlthermaSensors"
      qos: 0
template:
  - sensor:
      # --- Beispiele Messwerte (immer Zahl erzwingen) ---
      - name: "R1T-Außentemperatur"
        unique_id: r1t_aussentemperatur
        device_class: temperature
        unit_of_measurement: "°C"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','R1T-Außentemperatur') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','R1T-Außentemperatur') | string | replace(',', '.') | float(0) }}"

      - name: "Durchflussmenge (l/min)"
        unique_id: durchfluss_lmin
        unit_of_measurement: "L/min"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','Durchflussmenge (l/min)') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','Durchflussmenge (l/min)') | string | replace(',', '.') | float(0) }}"

      - name: "Wasserdruck"
        unique_id: wasserdruck_bar
        unit_of_measurement: "bar"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','Wasserdruck') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','Wasserdruck') | string | replace(',', '.') | float(0) }}"

      - name: "R9T-Wassereintrittstemp. vor PWT"
        unique_id: r9t_wassereintritt_vor_pwt
        device_class: temperature
        unit_of_measurement: "°C"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','R9T-Wassereintrittstemp. vor PWT') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','R9T-Wassereintrittstemp. vor PWT') | string | replace(',', '.') | float(0) }}"

      - name: "R10T-Wasseraustrittstemp. nach PWT"
        unique_id: r10t_wasseraustritt_nach_pwt
        device_class: temperature
        unit_of_measurement: "°C"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','R10T-Wasseraustrittstemp. nach PWT') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','R10T-Wasseraustrittstemp. nach PWT') | string | replace(',', '.') | float(0) }}"

      - name: "Hochdruck"
        unique_id: hochdruck_bar
        unit_of_measurement: "bar"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','Hochdruck') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','Hochdruck') | string | replace(',', '.') | float(0) }}"

      - name: "Niederdruck"
        unique_id: niederdruck_bar
        unit_of_measurement: "bar"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','Niederdruck') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','Niederdruck') | string | replace(',', '.') | float(0) }}"

      - name: "Hochdruck in °C"
        unique_id: hochdruck_eq_c
        device_class: temperature
        unit_of_measurement: "°C"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','Hochdruck in °C') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','Hochdruck in °C') | string | replace(',', '.') | float(0) }}"

      - name: "Niederdruck in °C"
        unique_id: niederdruck_eq_c
        device_class: temperature
        unit_of_measurement: "°C"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','Niederdruck in °C') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','Niederdruck in °C') | string | replace(',', '.') | float(0) }}"

      - name: "M5BatV"
        unique_id: m5batv_v
        device_class: voltage
        unit_of_measurement: "V"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','M5BatV') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','M5BatV') | string | replace('V','') | replace(',', '.') | float(0) }}"

      - name: "WifiRSSI"
        unique_id: wifirssi_dbm
        device_class: signal_strength
        unit_of_measurement: "dBm"
        state_class: measurement
        availability: "{{ state_attr('sensor.althermasensors','WifiRSSI') is not none }}"
        state: "{{ state_attr('sensor.althermasensors','WifiRSSI') | string | replace('dBm','') | replace(',', '.') | float(0) }}"

      # --- reine Texte 1:1 ---
      - name: "Aktuelle Betriebsart"
        unique_id: aktuelle_betriebsart_text
        state: "{{ state_attr('sensor.althermasensors','Aktuelle Betriebsart') | default('') }}"

      - name: "Betriebsart"
        unique_id: betriebsart_text
        state: "{{ state_attr('sensor.althermasensors','Betriebsart') | default('') }}"

      - name: "Betrieb / Störung"
        unique_id: betrieb_stoerung_text
        state: "{{ state_attr('sensor.althermasensors','Betrieb / Störung') | default('') }}"

  - binary_sensor:
      # --- ON/OFF 1:1 (ohne device_class, damit HA nix „interpretiert“) ---
      - name: "Thermostat EIN/AUS"
        unique_id: thermostat_ein_aus
        availability: "{{ state_attr('sensor.althermasensors','Thermostat EIN/AUS') is not none }}"
        state: "{{ (state_attr('sensor.althermasensors','Thermostat EIN/AUS') | string | upper) == 'ON' }}"
        attributes:
          raw_state: "{{ state_attr('sensor.althermasensors','Thermostat EIN/AUS') }}"

      - name: "3-Wege-Ventil (ON: DHW/OFF: Raumheizung)"
        unique_id: drei_wege_ventil_dhw
        availability: "{{ state_attr('sensor.althermasensors','3-Wege-Ventil (ON: DHW/OFF: Raumheizung)') is not none }}"
        state: "{{ (state_attr('sensor.althermasensors','3-Wege-Ventil (ON: DHW/OFF: Raumheizung)') | string | upper) == 'ON' }}"
        attributes:
          raw_state: "{{ state_attr('sensor.althermasensors','3-Wege-Ventil (ON: DHW/OFF: Raumheizung)') }}"

      - name: "Strömungsschalter (ON=OK)"
        unique_id: stroemung_on_ok
        availability: "{{ state_attr('sensor.althermasensors','Strömungsschalter (ON=OK)') is not none }}"
        state: "{{ (state_attr('sensor.althermasensors','Strömungsschalter (ON=OK)') | string | upper) == 'ON' }}"
        attributes:
          raw_state: "{{ state_attr('sensor.althermasensors','Strömungsschalter (ON=OK)') }}"
