# /config/packages/31_victron_energy_extensions.yaml
# Ergänzungen für Victron: PV-Ertrag, Netzbezug/-einspeisung, Kosten/Einnahmen, Preis-gesteuertes Laden

sensor:
  # PV DC -> kWh (Ertrag)
  - platform: integration
    source: sensor.victron_sys_pv_dc_coupled_w
    name: victron_pv_dc_yield_kwh_raw
    unique_id: victron_pv_dc_yield_kwh_raw
    unit_prefix: k
    method: trapezoidal
    round: 3

  # Netz Import/Export kWh
  - platform: integration
    source: sensor.victron_sys_grid_import_w
    name: victron_grid_import_kwh_raw
    unique_id: victron_grid_import_kwh_raw
    unit_prefix: k
    method: trapezoidal
    round: 3
  - platform: integration
    source: sensor.victron_sys_grid_export_w
    name: victron_grid_export_kwh_raw
    unique_id: victron_grid_export_kwh_raw
    unit_prefix: k
    method: trapezoidal
    round: 3

  # Kosten/Einnahmen integrieren
  - platform: integration
    source: sensor.strom_kostenrate_import_eur_h
    name: strom_kosten_import_eur_raw
    unit_time: h
    method: trapezoidal
    round: 4
  - platform: integration
    source: sensor.strom_einnahmerate_export_eur_h
    name: strom_einnahmen_export_eur_raw
    unit_time: h
    method: trapezoidal
    round: 4

template:
  - sensor:
      - name: "PV – Ertrag (DC) [kWh]"
        unique_id: pv_ertrag_dc_kwh
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: total_increasing
        state: "{{ states('sensor.victron_pv_dc_yield_kwh_raw')|float(0)|round(3) }}"

      # Netz Import/Export (W) aufteilen
      - name: victron_sys_grid_import_w
        unique_id: victron_sys_grid_import_w
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >-
          {% set g = states('sensor.victron_sys_grid_total_w')|float(0) %}
          {{ max(0, g) }}
      - name: victron_sys_grid_export_w
        unique_id: victron_sys_grid_export_w
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >-
          {% set g = states('sensor.victron_sys_grid_total_w')|float(0) %}
          {{ max(0, -g) }}

      # Abgeleitete kWh-Summen (sichtbar fürs Dashboard)
      - name: "Netzbezug [kWh]"
        unique_id: grid_import_kwh
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: total_increasing
        state: "{{ states('sensor.victron_grid_import_kwh_raw')|float(0)|round(3) }}"
      - name: "Netzeinspeisung [kWh]"
        unique_id: grid_export_kwh
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: total_increasing
        state: "{{ states('sensor.victron_grid_export_kwh_raw')|float(0)|round(3) }}"

      # €-Raten
      - name: "Strom Kostenrate Import [€/h]"
        unique_id: strom_kostenrate_import_eur_h
        unit_of_measurement: "€/h"
        icon: mdi:currency-eur
        state: >-
          {% set p = states('sensor.victron_sys_grid_import_w')|float(0) %}
          {% set price = states('sensor.conny_strompreis')|float(0) %}
          {{ ((p/1000.0) * price) | round(6) }}
      - name: "Strom Einnahmerate Export [€/h]"
        unique_id: strom_einnahmerate_export_eur_h
        unit_of_measurement: "€/h"
        icon: mdi:cash-plus
        state: >-
          {% set p = states('sensor.victron_sys_grid_export_w')|float(0) %}
          {% set fit = states('input_number.einspeiseverguetung_eur_kwh')|float(0) %}
          {{ ((p/1000.0) * fit) | round(6) }}

  - binary_sensor:
      - name: "Akku – jetzt günstig laden"
        unique_id: akku_jetzt_guenstig_laden
        state: >-
          {{ states('sensor.conny_strompreis')|float(10) <= states('input_number.price_threshold_eur_kwh')|float(0.25)
             and states('sensor.victron_sys_battery_soc_percent')|float(0) < states('input_number.target_soc_percent')|float(60) }}

  - sensor:
      - name: "Akku – Energie bis Ziel [kWh]"
        unique_id: akku_energy_to_target_kwh
        unit_of_measurement: "kWh"
        state: >-
          {% set cap = states('input_number.battery_capacity_kwh')|float(0) %}
          {% set soc = states('sensor.victron_sys_battery_soc_percent')|float(0) %}
          {% set tgt = states('input_number.target_soc_percent')|float(0) %}
          {% set need = ((tgt - soc)/100) * cap %}
          {{ (need if need > 0 else 0) | round(2) }}

utility_meter:
  pv_dc_ertrag_tag:
    source: sensor.pv_ertrag_dc_kwh
    cycle: daily
  pv_dc_ertrag_monat:
    source: sensor.pv_ertrag_dc_kwh
    cycle: monthly
  pv_dc_ertrag_jahr:
    source: sensor.pv_ertrag_dc_kwh
    cycle: yearly

  grid_import_tag:
    source: sensor.grid_import_kwh
    cycle: daily
  grid_import_monat:
    source: sensor.grid_import_kwh
    cycle: monthly
  grid_import_jahr:
    source: sensor.grid_import_kwh
    cycle: yearly

  grid_export_tag:
    source: sensor.grid_export_kwh
    cycle: daily
  grid_export_monat:
    source: sensor.grid_export_kwh
    cycle: monthly
  grid_export_jahr:
    source: sensor.grid_export_kwh
    cycle: yearly

  kosten_import_tag:
    source: sensor.strom_kosten_import_eur_raw
    cycle: daily
  kosten_import_monat:
    source: sensor.strom_kosten_import_eur_raw
    cycle: monthly
  kosten_import_jahr:
    source: sensor.strom_kosten_import_eur_raw
    cycle: yearly

  einnahmen_export_tag:
    source: sensor.strom_einnahmen_export_eur_raw
    cycle: daily
  einnahmen_export_monat:
    source: sensor.strom_einnahmen_export_eur_raw
    cycle: monthly
  einnahmen_export_jahr:
    source: sensor.strom_einnahmen_export_eur_raw
    cycle: yearly

input_number:
  einspeiseverguetung_eur_kwh:
    name: "Einspeisevergütung [€/kWh]"
    min: 0
    max: 0.6
    step: 0.001
    unit_of_measurement: "€/kWh"
    mode: box
  price_threshold_eur_kwh:
    name: "Preis-Schwelle [€/kWh]"
    min: 0
    max: 1
    step: 0.005
    unit_of_measurement: "€/kWh"
  target_soc_percent:
    name: "Ziel-SOC [%]"
    min: 10
    max: 100
    step: 1
    unit_of_measurement: "%"
  battery_capacity_kwh:
    name: "Batteriekapazität [kWh]"
    min: 1
    max: 50
    step: 0.1
    unit_of_measurement: "kWh"

number:
  - platform: modbus
    name: victron_ess_grid_setpoint_cmd_w
    unique_id: victron_ess_grid_setpoint_cmd_w
    hub: victron
    slave: 100
    address: 2716
    data_type: int32
    min_value: -10000
    max_value: 10000
    step: 50
    unit_of_measurement: "W"